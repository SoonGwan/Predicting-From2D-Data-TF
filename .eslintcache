[{"/Users/gwonsungwan/tf-face/src/App.js":"1","/Users/gwonsungwan/tf-face/src/reportWebVitals.js":"2","/Users/gwonsungwan/tf-face/src/TensorPredict/TensorPredict.js":"3","/Users/gwonsungwan/tf-face/src/CNN/data.js":"4","/Users/gwonsungwan/tf-face/src/CNN/HandwriteCNN.js":"5","/Users/gwonsungwan/tf-face/src/index.js":"6","/Users/gwonsungwan/tf-face/src/Postural-Emotion/PosturalEmotion.js":"7","/Users/gwonsungwan/tf-face/src/Postural-Emotion/demo_util.js":"8","/Users/gwonsungwan/tf-face/src/Image-Classifier/ImageClassifier.js":"9"},{"size":470,"mtime":1606701425166,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1606378981576,"results":"12","hashOfConfig":"11"},{"size":5356,"mtime":1606582360784,"results":"13","hashOfConfig":"11"},{"size":5418,"mtime":1606582252106,"results":"14","hashOfConfig":"11"},{"size":5664,"mtime":1606631458529,"results":"15","hashOfConfig":"11"},{"size":500,"mtime":1606378981575,"results":"16","hashOfConfig":"11"},{"size":2853,"mtime":1606654125912,"results":"17","hashOfConfig":"11"},{"size":5782,"mtime":1606652941214,"results":"18","hashOfConfig":"11"},{"size":1169,"mtime":1606702942742,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"4kef83",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/gwonsungwan/tf-face/src/App.js",["39","40","41"],"/Users/gwonsungwan/tf-face/src/reportWebVitals.js",[],"/Users/gwonsungwan/tf-face/src/TensorPredict/TensorPredict.js",[],"/Users/gwonsungwan/tf-face/src/CNN/data.js",["42"],"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\nconst IMAGE_SIZE = 784;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst TRAIN_TEST_RATIO = 5 / 6;\n\nconst NUM_TRAIN_ELEMENTS = Math.floor(TRAIN_TEST_RATIO * NUM_DATASET_ELEMENTS);\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n  'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\nconst MNIST_LABELS_PATH =\n  'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nexport class MnistData {\n  constructor() {\n    this.shuffledTrainIndex = 0;\n    this.shuffledTestIndex = 0;\n  }\n\n  async load() {\n    // Make a request for the MNIST sprited image.\n    const img = new Image();\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const imgRequest = new Promise((resolve, reject) => {\n      img.crossOrigin = '';\n      img.onload = () => {\n        img.width = img.naturalWidth;\n        img.height = img.naturalHeight;\n\n        const datasetBytesBuffer = new ArrayBuffer(\n          NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4\n        );\n\n        const chunkSize = 5000;\n        canvas.width = img.width;\n        canvas.height = chunkSize;\n\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n          const datasetBytesView = new Float32Array(\n            datasetBytesBuffer,\n            i * IMAGE_SIZE * chunkSize * 4,\n            IMAGE_SIZE * chunkSize\n          );\n          ctx.drawImage(\n            img,\n            0,\n            i * chunkSize,\n            img.width,\n            chunkSize,\n            0,\n            0,\n            img.width,\n            chunkSize\n          );\n\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let j = 0; j < imageData.data.length / 4; j++) {\n            // All channels hold an equal value since the image is grayscale, so\n            // just read the red channel.\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\n          }\n        }\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n        resolve();\n      };\n      img.src = MNIST_IMAGES_SPRITE_PATH;\n    });\n\n    const labelsRequest = fetch(MNIST_LABELS_PATH);\n    const [imgResponse, labelsResponse] = await Promise.all([\n      imgRequest,\n      labelsRequest,\n    ]);\n\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n\n    // Create shuffled indices into the train/test set for when we select a\n    // random dataset element for training / validation.\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages = this.datasetImages.slice(\n      0,\n      IMAGE_SIZE * NUM_TRAIN_ELEMENTS\n    );\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels = this.datasetLabels.slice(\n      0,\n      NUM_CLASSES * NUM_TRAIN_ELEMENTS\n    );\n    this.testLabels = this.datasetLabels.slice(\n      NUM_CLASSES * NUM_TRAIN_ELEMENTS\n    );\n  }\n\n  nextTrainBatch(batchSize) {\n    return this.nextBatch(\n      batchSize,\n      [this.trainImages, this.trainLabels],\n      () => {\n        this.shuffledTrainIndex =\n          (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n        return this.trainIndices[this.shuffledTrainIndex];\n      }\n    );\n  }\n\n  nextTestBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n      this.shuffledTestIndex =\n        (this.shuffledTestIndex + 1) % this.testIndices.length;\n      return this.testIndices[this.shuffledTestIndex];\n    });\n  }\n\n  nextBatch(batchSize, data, index) {\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n    for (let i = 0; i < batchSize; i++) {\n      const idx = index();\n\n      const image = data[0].slice(\n        idx * IMAGE_SIZE,\n        idx * IMAGE_SIZE + IMAGE_SIZE\n      );\n      batchImagesArray.set(image, i * IMAGE_SIZE);\n\n      const label = data[1].slice(\n        idx * NUM_CLASSES,\n        idx * NUM_CLASSES + NUM_CLASSES\n      );\n      batchLabelsArray.set(label, i * NUM_CLASSES);\n    }\n\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n    return { xs, labels };\n  }\n}\n","/Users/gwonsungwan/tf-face/src/CNN/HandwriteCNN.js",[],"/Users/gwonsungwan/tf-face/src/index.js",[],"/Users/gwonsungwan/tf-face/src/Postural-Emotion/PosturalEmotion.js",["43","44","45","46","47","48","49","50","51","52","53","54","55"],"/Users/gwonsungwan/tf-face/src/Postural-Emotion/demo_util.js",[],"/Users/gwonsungwan/tf-face/src/Image-Classifier/ImageClassifier.js",["56"],{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":21},{"ruleId":"57","severity":1,"message":"61","line":3,"column":8,"nodeType":"59","messageId":"60","endLine":3,"endColumn":20},{"ruleId":"57","severity":1,"message":"62","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"63","line":99,"column":12,"nodeType":"59","messageId":"60","endLine":99,"endColumn":23},{"ruleId":"57","severity":1,"message":"64","line":2,"column":13,"nodeType":"59","messageId":"60","endLine":2,"endColumn":15},{"ruleId":"57","severity":1,"message":"65","line":3,"column":13,"nodeType":"59","messageId":"60","endLine":3,"endColumn":18},{"ruleId":"57","severity":1,"message":"66","line":4,"column":13,"nodeType":"59","messageId":"60","endLine":4,"endColumn":20},{"ruleId":"57","severity":1,"message":"67","line":8,"column":3,"nodeType":"59","messageId":"60","endLine":8,"endColumn":18},{"ruleId":"57","severity":1,"message":"68","line":9,"column":3,"nodeType":"59","messageId":"60","endLine":9,"endColumn":16},{"ruleId":"57","severity":1,"message":"69","line":10,"column":3,"nodeType":"59","messageId":"60","endLine":10,"endColumn":15},{"ruleId":"57","severity":1,"message":"70","line":12,"column":3,"nodeType":"59","messageId":"60","endLine":12,"endColumn":18},{"ruleId":"57","severity":1,"message":"71","line":21,"column":9,"nodeType":"59","messageId":"60","endLine":21,"endColumn":14},{"ruleId":"57","severity":1,"message":"72","line":50,"column":18,"nodeType":"59","messageId":"60","endLine":50,"endColumn":27},{"ruleId":"57","severity":1,"message":"73","line":62,"column":9,"nodeType":"59","messageId":"60","endLine":62,"endColumn":32},{"ruleId":"57","severity":1,"message":"74","line":63,"column":9,"nodeType":"59","messageId":"60","endLine":63,"endColumn":28},{"ruleId":"57","severity":1,"message":"75","line":64,"column":9,"nodeType":"59","messageId":"60","endLine":64,"endColumn":37},{"ruleId":"57","severity":1,"message":"76","line":93,"column":9,"nodeType":"59","messageId":"60","endLine":93,"endColumn":17},{"ruleId":"57","severity":1,"message":"66","line":4,"column":13,"nodeType":"59","messageId":"60","endLine":4,"endColumn":20},"no-unused-vars","'TensorPredict' is defined but never used.","Identifier","unusedVar","'HandWriteCNN' is defined but never used.","'PosturalEmotion' is defined but never used.","'imgResponse' is assigned a value but never used.","'tf' is defined but never used.","'tfvis' is defined but never used.","'posenet' is defined but never used.","'drawBoundingBox' is defined but never used.","'drawKeypoints' is defined but never used.","'drawSkeleton' is defined but never used.","'toggleLoadingUI' is defined but never used.","'stats' is assigned a value but never used.","'loadVideo' is defined but never used.","'defaultResNetMultiplier' is assigned a value but never used.","'defaultResNetStride' is assigned a value but never used.","'defaultResNetInputResolution' is assigned a value but never used.","'setupGui' is assigned a value but never used."]